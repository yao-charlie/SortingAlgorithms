import unittest
from random import randint, shuffle
import NSquaredSort
import nlognSort
import copy


# TODO: expand unit tests, check test functions? Check unittest import documentation
# Possibly check the functions below or is that too granular?


def checkSorted(candidate_list, ascending=True):
    # Vacuous Case
    if len(candidate_list) <= 1:
        return True

    if ascending:
        for item in range(0, len(candidate_list) - 1):
            if candidate_list[item] > candidate_list[item + 1]:
                return False
        return True

    else:
        for item in range(0, len(candidate_list) - 1):
            if candidate_list[item] < candidate_list[item + 1]:
                return False
        return True


def createRandomList(size, high_range, low_range=0):
    random_list = []
    for each in range(0, size):
        rand_num = randint(low_range, high_range)
        random_list.append(rand_num)
    return random_list


# def create_sorted_random_list(size, high_range, low_range=0):
#     random_list=[]
#     for each


A = createRandomList(10, 100, -100)


# A = [75, 43, 96, 13, -76, -79, 93, 99, 78, 50]
# A = [4,3,2,0,1]
A = [1, 2, 1, 1, 2]
# A = [1, 2, 3, 4, 5]

def test(sort_algo):
    assert (checkSorted(sort_algo([1, 2, 3, 4, 5])))  # true case
    assert (checkSorted(sort_algo([1])))  # trivial case
    assert (checkSorted(sort_algo([1, 1, 1, 1, 1])))  # trivial case with multiple entries
    assert (checkSorted(sort_algo([])))  # vacuous case
    assert (checkSorted(sort_algo([4, 3, 0, 2, 1])))  # 1-loop case
    assert (checkSorted(sort_algo([1, 2, 0, 4, 3])))  # 2-loop case
    assert (checkSorted(sort_algo([1, 0, 2, 4, 3])))  # 3-loop case
    assert (checkSorted(sort_algo([1, 2, 1, 1, 2])))  # repeated elements case

    for _ in range(10):
        # add tests to ensure algo doesn't change element count and number.
        random_list = createRandomList(100, 100, -100)
        original_list = copy.deepcopy(random_list)
        sort_algo(random_list)

        # check length does not change
        assert (len(random_list) == len(original_list)), f"Length equality failed. Original list is {original_list}, mutated list is {random_list}"

        # check if the list is sorted
        assert (checkSorted(random_list)), f"checkSorted failed. Original list is {original_list}, mutated list is {random_list}"

        # check if all elements exist
        assert (set(random_list).intersection(original_list)) , f"Set equality failed. Original list is {original_list}, mutated list is {random_list}"



# # to test mergeSort as need to figure out how to mutate in place from a single function:
# for _ in range(10):
#     random_list = createRandomList(100, 10, -10)
#     original_list = copy.deepcopy(random_list)
#     random_list = nlognSort.mergeSortAlgo(random_list)
#     # check length does not change
#     assert (len(random_list) == len(
#         original_list)), f"Length equality failed. Original list is {original_list}, mutad list is {random_list}"
#
#     # check if the list is sorted
#     assert (checkSorted(random_list)), f"checkSorted failed. Original list is {original_list}, mutated list is {random_list}"
#
#     # check if all elements exist
#     assert (set(random_list).intersection(
#         original_list)), f"Set equality failed. Original list is {original_list}, mutated list is {random_list}"

print(A)
print(checkSorted(A, ascending=True))
nlognSort.mergeSort(A)
print(A)
print(checkSorted(A, ascending=True))
#
# print(B)
# NSquaredSort.cycleSort(B)
# print(B)
# print(checkSorted(B, ascending=True))
#
# print(C)
# NSquaredSort.cycleSort(C)
# print(C)
# print(checkSorted(C, ascending=True))
# test(NSquaredSort.selectionSort)
# test(NSquaredSort.insertionSort)
# test(NSquaredSort.bubbleSort)
# test(NSquaredSort.pseudoCycleSort)
# test(nlognSort.quickSort)
# test(nlognSort.mergeSort)
